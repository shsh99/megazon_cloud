/'
  **클래스 다이어그램 (Class Diagram)**
  클래스, 속성, 메서드 및 클래스 간의 관계를 보여줍니다.

  **주요 문법:**
  - `class`: 클래스 정의
  - `+`: public 속성/메서드
  - `-`: private 속성/메서드
  - `#`: protected 속성/메서드
  - -- (연관): 가장 기본적인 관계. 두 클래스가 서로 연결되어 있음 (예: User -- Book)
  - --|> (일반화): 'is-a' 관계. 상속을 나타내며, 자식 클래스가 부모 클래스의 모든 것을 상속(예: Cat --|> Animal)
  - o-- (집합): 'has-a' 관계. 전체-부분 관계지만, 부분이 전체로부터 독립적으로 존재할 수 있는 느슨한 관계(예: Department o-- Employee)
  - *-- (합성): 'has-a' 관계. 집합보다 강한 관계로, 전체가 사라지면 부분도 함께 소멸(예: Book *-- Page)
  - ..> (의존): 'uses-a' 관계. 한 클래스가 다른 클래스를 일시적으로 사용하는 약한 관계(예: Customer ..> PaymentGateway)
  - -- (다중성): 관계선 옆에 숫자를 표기해 연결되는 객체의 수 표사(예: Customer "1" -- "0..*" Order)
'/

@startuml "도서관 관리 시스템"
class Book {
  -title: String
  -author: String
  +getDetails(): String
}

class User {
  -userId: int
  #password: String
  +borrowBook(book: Book): void
}

class Library {
  +books: Book[*]
  +users: User[*]
  +addBook(book: Book): void
}

User "1" -- "*" Book : borrows >
Library "1" o-- "*" Book : contains
Library "1" -- "*" User : manages
@enduml